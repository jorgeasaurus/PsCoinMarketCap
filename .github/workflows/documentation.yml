name: Documentation

permissions:
    contents: write

on:
  push:
    branches: [ main ]
    paths:
      - 'Source/**/*.ps1'
      - 'Source/**/*.psd1'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Source/**/*.ps1'
      - 'Source/**/*.psd1'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

env:
  MODULE_NAME: PsCoinMarketCap
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  generate-docs:
    name: Generate Documentation
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install PowerShell modules
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name platyPS -Force -Scope CurrentUser -SkipPublisherCheck
        Install-Module -Name ImportExcel -Force -Scope CurrentUser -ErrorAction SilentlyContinue

    - name: Import module and generate help
      shell: pwsh
      run: |
        Write-Host "üîß Importing module and generating documentation..." -ForegroundColor Cyan
        
        # Import the module
        Import-Module ./Source/${{ env.MODULE_NAME }}.psd1 -Force
        
        # Verify module loaded
        $module = Get-Module ${{ env.MODULE_NAME }}
        if (-not $module) {
          Write-Error "‚ùå Failed to import module"
          exit 1
        }
        
        Write-Host "‚úÖ Module imported: $($module.Name) v$($module.Version)" -ForegroundColor Green
        Write-Host "üìä Functions exported: $($module.ExportedFunctions.Count)" -ForegroundColor White

    - name: Generate platyPS documentation
      shell: pwsh
      run: |
        Write-Host "üìö Generating platyPS documentation..." -ForegroundColor Cyan
        
        # Create docs directory structure
        $docsPath = "./docs"
        $helpPath = "$docsPath/Help"
        $functionsPath = "$helpPath/Functions"
        $platyPSpath = "$docsPath/en-US"
        
        @($docsPath, $helpPath, $functionsPath, $platyPSpath) | ForEach-Object {
          if (-not (Test-Path $_)) {
            New-Item -Path $_ -ItemType Directory -Force | Out-Null
          }
        }
        
        # Import the module first
        Import-Module ./Source/${{ env.MODULE_NAME }}.psd1 -Force
        
        # Verify module is imported
        $module = Get-Module ${{ env.MODULE_NAME }}
        if (-not $module) {
          Write-Warning "Module not imported, trying to import again..."
          Import-Module ./Source/${{ env.MODULE_NAME }}.psd1 -Force -Global
          $module = Get-Module ${{ env.MODULE_NAME }}
        }
        
        try {
          # Generate help for each command using platyPS
          Write-Host "üìù Generating platyPS help files..." -ForegroundColor Yellow
          Write-Host "  Module: $($module.Name) v$($module.Version)" -ForegroundColor Gray
          Write-Host "  Functions: $($module.ExportedFunctions.Count)" -ForegroundColor Gray
          Write-Host "  Output folder: $platyPSpath" -ForegroundColor Gray
          
          # Debug: Show the variable value
          if ([string]::IsNullOrEmpty($platyPSpath)) {
            Write-Error "platyPSpath variable is empty!"
            $platyPSpath = "./docs/en-US"
            Write-Host "  Using fallback path: $platyPSpath" -ForegroundColor Yellow
          }
          
          # Ensure directory exists
          if (-not (Test-Path $platyPSpath)) {
            New-Item -Path $platyPSpath -ItemType Directory -Force | Out-Null
          }
          
          New-MarkdownHelp -Module ${{ env.MODULE_NAME }} -OutputFolder $platyPSpath -WithModulePage -Force
          
          # Generate external help file
          New-ExternalHelp -Path $platyPSpath -OutputPath "./Source/en-US" -Force
          
          Write-Host "‚úÖ platyPS documentation generated successfully" -ForegroundColor Green
        }
        catch {
          Write-Warning "platyPS generation failed: $_"
          Write-Host "Falling back to custom help generation..." -ForegroundColor Yellow
        }

    - name: Generate custom documentation
      shell: pwsh
      run: |
        Write-Host "üìã Generating custom documentation..." -ForegroundColor Cyan
        
        # Ensure module is imported
        if (-not (Get-Module ${{ env.MODULE_NAME }})) {
          Import-Module ./Source/${{ env.MODULE_NAME }}.psd1 -Force
        }
        
        $module = Get-Module ${{ env.MODULE_NAME }}
        $functions = $module.ExportedFunctions.Keys | Sort-Object
        
        # Create function categories
        $authFunctions = $functions | Where-Object { $_ -like "*ApiKey*" }
        $cryptoFunctions = $functions | Where-Object { $_ -like "Get-CMC*" -and $_ -notlike "*Exchange*" -and $_ -notlike "*Global*" -and $_ -notlike "*ApiKey*" -and $_ -notlike "*Rate*" }
        $globalFunctions = $functions | Where-Object { $_ -like "*Global*" }
        $toolsFunctions = $functions | Where-Object { $_ -in @('Convert-CMCPrice', 'Export-CMCData', 'Watch-CMCPrice', 'Get-CMCChart') }
        $exchangeFunctions = $functions | Where-Object { $_ -like "*Exchange*" }
        $rateFunctions = $functions | Where-Object { $_ -like "*Rate*" -or $_ -like "Invoke-*" }
        
        # Generate function lists
        $authList = ($authFunctions | ForEach-Object { "- [$_](en-US/$_.md)" }) -join "`n"
        $cryptoList = ($cryptoFunctions | ForEach-Object { "- [$_](en-US/$_.md)" }) -join "`n"
        $globalList = ($globalFunctions | ForEach-Object { "- [$_](en-US/$_.md)" }) -join "`n"
        $toolsList = ($toolsFunctions | ForEach-Object { "- [$_](en-US/$_.md)" }) -join "`n"
        $exchangeList = ($exchangeFunctions | ForEach-Object { "- [$_](en-US/$_.md)" }) -join "`n"
        $rateList = ($rateFunctions | ForEach-Object { "- [$_](en-US/$_.md)" }) -join "`n"
        
        # Generate function table
        $functionTable = $functions | ForEach-Object {
          $functionName = $_
          $category = "Other"
          if ($_ -like "*ApiKey*") { $category = "Authentication" }
          elseif ($_ -like "Get-CMCListings" -or $_ -like "Get-CMCQuotes" -or $_ -like "Get-CMCInfo" -or $_ -like "Get-CMCMap") { $category = "Cryptocurrency" }
          elseif ($_ -like "*Global*") { $category = "Global Metrics" }
          elseif ($_ -in @('Convert-CMCPrice', 'Export-CMCData', 'Watch-CMCPrice', 'Get-CMCChart')) { $category = "Tools & Utilities" }
          elseif ($_ -like "*Exchange*") { $category = "Exchange Data" }
          elseif ($_ -like "*Rate*" -or $_ -like "Invoke-*") { $category = "Rate Limiting" }
          
          $synopsis = "PowerShell cmdlet"
          try {
            $help = Get-Help $_ -ErrorAction SilentlyContinue
            if ($help.Synopsis -and $help.Synopsis -ne $_) {
              $synopsis = if ($help.Synopsis.Length -gt 80) { $help.Synopsis.Substring(0, 77) + "..." } else { $help.Synopsis }
            }
          } catch {
            # Use default synopsis
          }
          
          "| [$_](en-US/$_.md) | $synopsis | $category |"
        }
        $functionTableText = $functionTable -join "`n"
        
        # Generate comprehensive module help
        $moduleHelp = @"
        # ${{ env.MODULE_NAME }} PowerShell Module

        **Version:** $($module.Version)  
        **Author:** $($module.Author)  
        **Generated:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')

        ## Description
        $($module.Description)

        ## Installation

        ### From PowerShell Gallery
        ``````powershell
        Install-Module -Name ${{ env.MODULE_NAME }}
        Import-Module ${{ env.MODULE_NAME }}
        ``````

        ### From Source
        ``````powershell
        git clone https://github.com/jorgeasaurus/${{ env.MODULE_NAME }}.git
        Import-Module ./${{ env.MODULE_NAME }}/Source/${{ env.MODULE_NAME }}.psd1
        ``````

        ## Quick Start

        ``````powershell
        # Set up your API key
        Set-CMCApiKey -ApiKey "your-api-key-here"

        # Get top 10 cryptocurrencies
        Get-CMCListings -Limit 10

        # Get Bitcoin price
        Get-CMCQuotes -Symbol "BTC"

        # Monitor prices with alerts
        Watch-CMCPrice -Symbol "BTC" -AlertAbove 50000
        ``````

        ## Available Functions

        This module exports **$($functions.Count) functions** organized by category:

        ### Authentication
        $authList

        ### Cryptocurrency Data
        $cryptoList

        ### Global Metrics
        $globalList

        ### Tools & Utilities
        $toolsList

        ### Exchange Data
        $exchangeList

        ### Rate Limiting & Utilities
        $rateList

        ## Complete Function List

        | Function | Synopsis | Category |
        |----------|----------|----------|
        $functionTableText

        ## Additional Resources

        - [API Reference Guide](API_REFERENCE.md) - Comprehensive API documentation
        - [Free Tier Guide](FREE_TIER_GUIDE.md) - Maximizing free tier usage
        - [Deployment Guide](../DEPLOYMENT_GUIDE.md) - Module deployment and distribution
        - [Changelog](../CHANGELOG.md) - Version history and release notes
        - [GitHub Repository](https://github.com/jorgeasaurus/${{ env.MODULE_NAME }})
        - [CoinMarketCap API Documentation](https://coinmarketcap.com/api/documentation/v1/)

        ## Support

        - üêõ **Issues**: [GitHub Issues](https://github.com/jorgeasaurus/${{ env.MODULE_NAME }}/issues)
        - üí¨ **Discussions**: [GitHub Discussions](https://github.com/jorgeasaurus/${{ env.MODULE_NAME }}/discussions)
        - üìñ **Documentation**: Complete guides in the [docs folder](.)

        ## License

        This project is licensed under the MIT License - see the [LICENSE](../LICENSE) file for details.
        "@
        
        $moduleHelp | Out-File -FilePath "./docs/Help/${{ env.MODULE_NAME }}-Help.md" -Encoding UTF8

    - name: Validate generated documentation
      shell: pwsh
      run: |
        Write-Host "‚úÖ Validating generated documentation..." -ForegroundColor Cyan
        
        $helpPath = "./docs"
        $platypspath = "./docs/en-US"
        
        # Check if platyPS help files were generated
        $platypsFiles = 0
        if (Test-Path $platypspath) {
          $platypsFiles = (Get-ChildItem $platypspath -Filter "*.md" | Measure-Object).Count
        }
        
        # Check if main help file was generated
        $mainHelp = "./docs/Help/${{ env.MODULE_NAME }}-Help.md"
        $mainHelpExists = Test-Path $mainHelp
        
        Write-Host "üìä Documentation Statistics:" -ForegroundColor Cyan
        Write-Host "  platyPS Help Files: $platypsFiles" -ForegroundColor White
        Write-Host "  Main Help File: $(if($mainHelpExists){'‚úÖ Generated'}else{'‚ùå Missing'})" -ForegroundColor White
        Write-Host "  API Reference: $(if(Test-Path './docs/API_REFERENCE.md'){'‚úÖ Present'}else{'‚ùå Missing'})" -ForegroundColor White
        Write-Host "  Free Tier Guide: $(if(Test-Path './docs/FREE_TIER_GUIDE.md'){'‚úÖ Present'}else{'‚ùå Missing'})" -ForegroundColor White
        
        if ($platypsFiles -gt 0 -or $mainHelpExists) {
          Write-Host "‚úÖ Documentation generation successful!" -ForegroundColor Green
        } else {
          Write-Warning "‚ö†Ô∏è  Documentation generation may have issues"
        }

    - name: Clean up
      shell: pwsh
      run: |
        # Remove imported module
        Remove-Module ${{ env.MODULE_NAME }} -Force -ErrorAction SilentlyContinue

    - name: Commit and push documentation
      if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/ Source/en-US/
        git diff --staged --quiet || git commit -m "üìö Auto-update documentation [skip ci]"
        git push

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          docs/
          Source/en-US/
        retention-days: 30

  build-docs-site:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: generate-docs
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Prepare Documentation Site
      run: |
        # Create Jekyll config
        cat > _config.yml << 'EOF'
        theme: jekyll-theme-minimal
        title: PsCoinMarketCap
        description: PowerShell module for CoinMarketCap API v1 - Cryptocurrency data, monitoring, and analysis tools
        logo: PsCoinMarketCap_Logo.png
        show_downloads: true
        include:
          - docs
          - README.md
          - CHANGELOG.md
          - LICENSE
        exclude:
          - Source/
          - Tests/
          - Build/
          - Output/
        EOF
        
        # Copy README as index
        cp README.md index.md
        
        # Verify documentation exists
        echo "Documentation files:"
        ls -la docs/ 2>/dev/null || echo "Docs not found yet"
    
    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: .
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify-completion:
    name: Notify Documentation Update
    runs-on: ubuntu-latest
    needs: [generate-docs, build-docs-site]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Create summary
      run: |
        echo "üìö Documentation update completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- üîß Function reference updated with platyPS" >> $GITHUB_STEP_SUMMARY
        echo "- üìñ Help files regenerated" >> $GITHUB_STEP_SUMMARY
        echo "- üåê GitHub Pages deployed with Jekyll" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Links" >> $GITHUB_STEP_SUMMARY
        echo "- [üìñ Documentation Site](https://jorgeasaurus.github.io/PsCoinMarketCap)" >> $GITHUB_STEP_SUMMARY
        echo "- [üöÄ API Reference](docs/API_REFERENCE.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [üíé Free Tier Guide](docs/FREE_TIER_GUIDE.md)" >> $GITHUB_STEP_SUMMARY