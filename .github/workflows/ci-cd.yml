name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  release:
    types: [ published ]

env:
  MODULE_NAME: PsCoinMarketCap
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  test:
    name: Test Module
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        psversion: ['5.1', '7.x']
        exclude:
          - os: ubuntu-latest
            psversion: '5.1'
          - os: macos-latest
            psversion: '5.1'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install PowerShell (Windows)
      if: matrix.os == 'windows-latest' && matrix.psversion == '7.x'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.x'

    - name: Install PowerShell Core (Linux/macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install --cask powershell
        fi

    - name: Install Required Modules
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        if ($IsWindows -or $PSVersionTable.PSVersion.Major -eq 5) {
          Install-Module -Name ImportExcel -Force -Scope CurrentUser
        }

    - name: Import Module
      shell: pwsh
      run: |
        Import-Module ./Source/${{ env.MODULE_NAME }}.psd1 -Force
        Get-Module ${{ env.MODULE_NAME }}

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Cyan
        $analysisResults = Invoke-ScriptAnalyzer -Path ./Source -Recurse -Severity Warning,Error
        if ($analysisResults) {
          $analysisResults | Format-Table -AutoSize
          Write-Error "PSScriptAnalyzer found issues. Please review and fix."
        } else {
          Write-Host "✅ No PSScriptAnalyzer issues found" -ForegroundColor Green
        }

    - name: Run Pester Tests
      shell: pwsh
      run: |
        Write-Host "Running Pester tests..." -ForegroundColor Cyan
        
        $config = New-PesterConfiguration
        $config.Run.Path = './Tests'
        $config.Run.PassThru = $true
        $config.CodeCoverage.Enabled = $true
        $config.CodeCoverage.Path = './Source/**/*.ps1'
        $config.CodeCoverage.OutputFormat = 'JaCoCo'
        $config.CodeCoverage.OutputPath = './coverage.xml'
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputFormat = 'NUnitXml'
        $config.TestResult.OutputPath = './testresults.xml'
        $config.Output.Verbosity = 'Detailed'
        
        $result = Invoke-Pester -Configuration $config
        
        Write-Host "Test Results:" -ForegroundColor Cyan
        Write-Host "  Total Tests: $($result.TotalCount)" -ForegroundColor White
        Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
        Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor Red
        Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
        
        if ($result.CodeCoverage) {
          Write-Host "  Code Coverage: $([math]::Round($result.CodeCoverage.CoveragePercent, 2))%" -ForegroundColor Blue
        }
        
        if ($result.FailedCount -gt 0) {
          Write-Error "❌ $($result.FailedCount) test(s) failed"
        } else {
          Write-Host "✅ All tests passed!" -ForegroundColor Green
        }

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-ps${{ matrix.psversion }}
        path: |
          testresults.xml
          coverage.xml

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.psversion == '7.x'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Module
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install PowerShell Modules
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name ImportExcel -Force -Scope CurrentUser
        Install-Module -Name platyPS -Force -Scope CurrentUser

    - name: Build Module
      shell: pwsh
      run: |
        Write-Host "Building module..." -ForegroundColor Cyan
        
        # Create build directory
        $buildPath = "./Build/Output"
        if (Test-Path $buildPath) {
          Remove-Item $buildPath -Recurse -Force
        }
        New-Item -Path $buildPath -ItemType Directory -Force
        
        # Copy module files
        Copy-Item -Path "./Source/*" -Destination $buildPath -Recurse -Force
        
        # Generate external help
        if (Test-Path "./Build/New-ExternalHelp.ps1") {
          & "./Build/New-ExternalHelp.ps1" -ModulePath $buildPath -OutputPath "./docs/Help"
        }
        
        Write-Host "✅ Module build completed" -ForegroundColor Green

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: module-build
        path: Build/Output/

  publish:
    name: Publish to PowerShell Gallery
    runs-on: windows-latest
    needs: [test, build]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: module-build
        path: Build/Output/

    - name: Publish Module
      shell: pwsh
      env:
        PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      run: |
        Write-Host "Publishing module to PowerShell Gallery..." -ForegroundColor Cyan
        
        # Validate API key
        if (-not $env:PSGALLERY_API_KEY) {
          Write-Error "PowerShell Gallery API key not found in secrets"
          exit 1
        }
        
        # Import and validate module
        $modulePath = "./Build/Output"
        Import-Module "$modulePath/${{ env.MODULE_NAME }}.psd1" -Force
        
        $module = Get-Module ${{ env.MODULE_NAME }}
        Write-Host "Module version: $($module.Version)" -ForegroundColor Yellow
        
        # Test module manifest
        Test-ModuleManifest "$modulePath/${{ env.MODULE_NAME }}.psd1"
        
        # Publish to gallery
        try {
          Publish-Module -Path $modulePath -NuGetApiKey $env:PSGALLERY_API_KEY -Verbose
          Write-Host "✅ Module published successfully!" -ForegroundColor Green
        }
        catch {
          Write-Error "❌ Failed to publish module: $_"
          exit 1
        }

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Release Notes
      shell: pwsh
      run: |
        Write-Host "Generating release notes..." -ForegroundColor Cyan
        
        # Extract version from tag
        $tag = "${{ github.event.release.tag_name }}"
        $version = $tag -replace '^v', ''
        
        # Read changelog
        $changelogPath = "./CHANGELOG.md"
        if (Test-Path $changelogPath) {
          $changelog = Get-Content $changelogPath -Raw
          
          # Extract version-specific notes
          $pattern = "## \[$version\].*?(?=## \[|\z)"
          $versionNotes = [regex]::Match($changelog, $pattern, [System.Text.RegularExpressions.RegexOptions]::Singleline).Value
          
          if ($versionNotes) {
            $versionNotes | Out-File -FilePath "./release-notes.md" -Encoding UTF8
            Write-Host "✅ Release notes generated" -ForegroundColor Green
          } else {
            Write-Warning "No release notes found for version $version"
            "Release notes for version $version" | Out-File -FilePath "./release-notes.md" -Encoding UTF8
          }
        } else {
          Write-Warning "CHANGELOG.md not found"
          "Release notes for version $version" | Out-File -FilePath "./release-notes.md" -Encoding UTF8
        }

    - name: Update Release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const releaseNotes = fs.readFileSync('./release-notes.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: releaseNotes
          });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'