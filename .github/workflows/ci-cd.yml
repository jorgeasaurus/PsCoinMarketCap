name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  MODULE_NAME: PsCoinMarketCap

jobs:
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Required Modules
      shell: pwsh
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -RequiredVersion 5.5.0
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Cyan
        $analysisResults = Invoke-ScriptAnalyzer -Path ./Source -Recurse -Severity Warning,Error -ExcludeRule PSUseShouldProcessForStateChangingFunctions,PSAvoidUsingWriteHost
        if ($analysisResults) {
          $analysisResults | Format-Table -AutoSize
          Write-Warning "PSScriptAnalyzer found issues"
        } else {
          Write-Host "✅ No PSScriptAnalyzer issues found" -ForegroundColor Green
        }

    - name: Import Module
      shell: pwsh
      run: |
        Import-Module ./Source/${{ env.MODULE_NAME }}.psd1 -Force -Verbose
        Get-Module ${{ env.MODULE_NAME }} | Format-List

    - name: Run Pester Tests
      shell: pwsh
      run: |
        Write-Host "Running Pester tests..." -ForegroundColor Cyan
        
        # Check if tests exist
        if (Test-Path ./Tests) {
          $config = New-PesterConfiguration
          $config.Run.Path = './Tests'
          $config.Run.PassThru = $true
          $config.Output.Verbosity = 'Detailed'
          
          $result = Invoke-Pester -Configuration $config
          
          Write-Host "Test Results:" -ForegroundColor Cyan
          Write-Host "  Total Tests: $($result.TotalCount)" -ForegroundColor White
          Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
          Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor Red
          
          if ($result.FailedCount -gt 0) {
            Write-Error "❌ $($result.FailedCount) test(s) failed"
          } else {
            Write-Host "✅ All tests passed!" -ForegroundColor Green
          }
        } else {
          Write-Warning "No tests found in ./Tests directory"
        }

  build:
    name: Build Module
    runs-on: windows-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Module
      shell: pwsh
      run: |
        Write-Host "Building module..." -ForegroundColor Cyan
        
        # Run build script
        if (Test-Path ./build.ps1) {
          ./build.ps1 -Task Build
        } else {
          # Manual build if script doesn't exist
          $outputPath = "./Output/${{ env.MODULE_NAME }}/1.0.0"
          if (Test-Path $outputPath) {
            Remove-Item $outputPath -Recurse -Force
          }
          New-Item -Path $outputPath -ItemType Directory -Force
          
          # Copy module files
          Copy-Item -Path "./Source/*" -Destination $outputPath -Recurse -Force
        }
        
        Write-Host "✅ Module build completed" -ForegroundColor Green

    - name: Test Module Manifest
      shell: pwsh
      run: |
        $manifestPath = Get-ChildItem -Path ./Output -Filter "*.psd1" -Recurse | Select-Object -First 1
        if ($manifestPath) {
          Test-ModuleManifest -Path $manifestPath.FullName
          Write-Host "✅ Module manifest is valid" -ForegroundColor Green
        } else {
          Write-Error "Module manifest not found"
        }

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: module-build
        path: Output/

  publish:
    name: Publish to PowerShell Gallery
    runs-on: windows-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: module-build
        path: Output/

    - name: Publish to PowerShell Gallery
      shell: pwsh
      env:
        NUGET_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      run: |
        if ($env:NUGET_API_KEY) {
          Write-Host "Publishing to PowerShell Gallery..." -ForegroundColor Cyan
          
          $modulePath = Get-ChildItem -Path ./Output -Directory -Recurse | 
            Where-Object { Test-Path (Join-Path $_.FullName "${{ env.MODULE_NAME }}.psd1") } | 
            Select-Object -First 1
          
          if ($modulePath) {
            try {
              Publish-Module -Path $modulePath.FullName -NuGetApiKey $env:NUGET_API_KEY -Verbose
              Write-Host "✅ Module published to PowerShell Gallery" -ForegroundColor Green
            } catch {
              Write-Error "Failed to publish: $_"
            }
          } else {
            Write-Error "Module path not found"
          }
        } else {
          Write-Warning "PSGALLERY_API_KEY secret not configured. Skipping publish."
        }